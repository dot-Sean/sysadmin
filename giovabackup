#!/bin/sh
#
# repo https://github.com/nellinux/sysadmin

#
#  Costanti
#

VERSION='Tue Apr 1 2014 / 01'

CMDLINE="$0 $@"

APP_NAME=`basename $0 .sh | sed 's/.*\///'`

LOG_DIR="$HOME/giovabackup.log"
LOG_FILE_BASE='giovabackup'

CONTAINER_2='/Volumes/2TBWDSILVER/STORAGE2TBSILVER'
CONTAINER_1='/Users/giovanni/STORAGEMAC'


SERVER_NAME='192.168.1.100'   # eth1
SERVER_STORAGE='/var/storage'


#
# Variabili di modulo
#

ts=`date +%Y%m%d%H%M%S`
log_file=$LOG_DIR/$LOG_FILE_BASE          #.$(date +%Y%d%m%H%M%S)


#
# Funzioni
#

log(){
    [ "$VERBOSE" == "--verbose" ] && echo "[$APP_NAME `date +%T`] $1"
    echo "[$APP_NAME `date +%T`] $1" >> $log_file
}


print_env(){
  cat <<EOF
Costanti utilizzate nel programma:
  CONTAINER_1 = $CONTAINER_1
  CONTAINER_2 = $CONTAINER_2
  LOG_DIR = $LOG_DIR
  LOG_FILE_BASE = $LOG_FILE_BASE
  SERVER_NAME = $SERVER_NAME
  SERVER_STORAGE = $SERVER_STORAGE
EOF
}

version(){
    echo $VERSION
}


usage(){
cat <<EOF
NOME: $APP_NAME

SINOSSI: $APP_NAME [OPZIONI] COMANDO

DESCRIZIONE:

     Il programma $APP_NAME sincronizza oggetti del Mac con il server
     di backup.

COMANDI:

     mac-to-server   :  eseguito nel Mac, esegue il backup sul server


OPZIONI:
     -n  dry run
     -h  questo help
     -v  modo prolisso
     -V  stampa le informazioni di versione del programma

EOF
  exit 1
}

work_in_progress() {
cat <<EOF
$(basename $0)
Questa funzionalita' non e' disponibile :-)
EOF

}

#### MAIN ###

EXIT_SUCCESS=0
NOOP=0
INVALID_EXECUTION_HOST=1
FUNCTION_TO_BE_DEFINED=2
DISK_NOT_AVAILABLE=3
DIRECTORY_NOT_WRITABLE=4
DIRECTORY_NOT_READABLE=6
DEVICE_NOT_AVAILABLE=5

#
# Gestione dei parametri e delle opzioni
#
while getopts ":nhVv" option; do
  case $option in
      n)  DRY_RUN='--dry-run'
          ;;

      h)  usage
          exit $EXIT_SUCCESS
          ;;

      v)  VERBOSE='--verbose'
          ;;

      V)  version
          print_env
          exit $EXIT_SUCCESS
          ;;
  esac
done

shift $(($OPTIND - 1))



#
# Funzioni che devono stare qui in quanto hanno bisogno di accedere ai
# valori di alcune variabili di modulo e costanti.
#

additional_notice() {
    if [ "$DRY_RUN" != "--dry-run" ]; then
        cat <<EOF
** TBD **
EOF
    fi
}

dir_is_writable() {
    d=$1
    if [ ! -w "$d" ]; then
        echo "$d non esiste o non e' permesso scrivervi."
        exit $DIRECTORY_NOT_WRITABLE
    fi
}

dir_is_readable() {
    d=$1
    if [ ! -x "$d" ]; then
        echo "$d non esiste o non e' permesso accedervi."
    fi
}

are_objects_readable() {
    dir_is_readable $CONTAINER_1
    dir_is_readable $CONTAINER_2
}


mac_to_server() {

    log 'Mac to server sync ...'

    are_objects_readable

    for container in $CONTAINER_1 $CONTAINER_2; do

        log "Syncing $container to server ... "

if [ -w "$container" ]; then
    dest_dir=$(basename $container)
    echo "rsync -a $VERBOSE --itemize-changes --log-file=$log_file --delete $DRY_RUN  $container/  giovanni@$SERVER_NAME:$SERVER_STORAGE/$dest_dir/"
          rsync -a $VERBOSE --itemize-changes --log-file=$log_file --delete $DRY_RUN  $container/  giovanni@$SERVER_NAME:$SERVER_STORAGE/$dest_dir/
else
    log "$container non sincronizzata (non accessibile in scrittura o non esistente)"
fi

    done
}



#
# Init
#
mkdir -p "$LOG_DIR"
log "Start as \"$CMDLINE\" from `pwd`"

#
# Ciclo dei comandi
#
cmd=$1
case $cmd in

    mac-to-server)
        mac_to_server
        ;;

    *)  usage
        exit $EXIT_SUCCESS
        ;;
esac

exit 0
