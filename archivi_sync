#!/bin/sh
#
# repo https://github.com/nellinux/sysadmin

APP_NAME=`basename $0 .sh | sed 's/.*\///'`
LOG_ROOT='TBD'    #'/var/log/archivi_sync'
BACKUP_ROOT='TBD' #'/home/archivi.sync_backup'
WORK_HOST='ls0001.direzione.lombardia.dipvvf.it'
PRIVATE_HOST='k.nellinux.net'
DISK_ID='0bc2:2332'
DISK_MOUNT='/mnt/seagate'
DISK_DEV='/dev/seagate'
MAPNAME='cryptoseagate'



log(){
    echo "[$APP_NAME `date +%T`] $1"
    logger $1 -t $APP_NAME
}


version() {
  v=$(cat $0 | sed -n /^#.*Id:/p )
  echo $v | sed  's/.*Id://'
}


usage() {
cat <<EOF
NOME: $APP_NAME

SINOSSI: $APP_NAME [OPZIONI] COMANDO

DESCRIZIONE:
     Il programma $APP_NAME sincronizza il calcolatore privato ed il
     calcolatore di ufficio.  I backup sono negli oggetti $BACKUP_ROOT
     dei due calcolatori; i log sono nell'ggetto $LOG_ROOT del
     calcolatore su cui si esegue il programma.

COMANDI:
     work-to-disk    :  eseguito nell'host di ufficio sincronizza con un disco esterno
     private-to-disk :  eseguito nell'host privato sincronizza con un disco esterno

     mount  : monta il dispositivo cifrato
     remove : smonta la partizione e rimuove il device-mapper

OPZIONI:
     -n  dry run
     -h  questo help
     -V  stampa le informazioni di versione del programma

EOF
  exit 1
}

work_in_progress() {
cat <<EOF
$(basename $0)
Questa funzionalita' non e' disponibile :-)
EOF

}

#### MAIN ###

EXIT_SUCCESS=0
NOOP=0
INVALID_EXECUTION_HOST=1
FUNCTION_TO_BE_DEFINED=2
DISK_NOT_AVAILABLE=3
DIRECTORY_NOT_WRITABLE=4
DEVICE_NOT_AVAILABLE=5

#
# Gestione dei parametri e delle opzioni
#
while getopts ":nhV" option; do
  case $option in
      n)  DRY_RUN='--dry-run'
          ;;
      h)  usage
          exit $EXIT_SUCCESS
          ;;
      V)  version
          exit $EXIT_SUCCESS
          ;;
  esac
done

shift $(($OPTIND - 1))

#
# Variabili di modulo
#

host=`cat /etc/HOSTNAME`
ts=`date +%Y%m%d%H%M%S`

#
# Funzioni che devono stare qui in quanto hanno bisogno di accedere ai
# valori di alcune variabili di modulo e costanti.
#

additional_notice() {
    if [ "$DRY_RUN" != "--dry-run" ]; then
        cat <<EOF
I backup dei file cancellati sono in $BACKUP_ROOT e $PRIVATE_HOST:$BACKUP_ROOT.
I log si trovano in $LOG_ROOT.
EOF
    fi
}

dir_is_writable() {
    d=$1
    if [ ! -w "$d" ]; then
        log "$d non esiste o non è permesso scrivervi."
        exit $DIRECTORY_NOT_WRITABLE
    fi
}

are_objects_available() {
    dir_is_writable /home/archivi/home/
    dir_is_writable /home/archivi/home/var/biblioteca/
    dir_is_writable /home/archivi/office/
    dir_is_writable /home/archivi/share.in/
    dir_is_writable /home/archivi/share.out/
    dir_is_writable /mnt/seagate/archivi/home/
    dir_is_writable /mnt/seagate/archivi/home/var/biblioteca/
    dir_is_writable /mnt/seagate/archivi/office/
    dir_is_writable /mnt/seagate/archivi/share.to_private/
    dir_is_writable /mnt/seagate/archivi/share.to_work/
}


work_to_disk() {

    # Aggiornamento tramite HOST LAVORO collegato a disco
    #
    # Policy:
    #
    #   - SHARED objects:   HOST <--> USB   (no delete)
    #
    #   - WORK archive:  HOST ---> USB   (delete)
    #
    #   - PRIVATE archive:      USB ---> HOST  (delete) (some objects only)
    #


    log 'Work -> USB'

    if are_objects_available; then

        log 'Shared files moving'
        if  [ "$DRY_RUN" == '' ]; then
            mv  /mnt/seagate/archivi/share.to_work/*  /home/archivi/share.in/                 > /dev/null 2>&1
            mv  /home/archivi/share.out/*             /mnt/seagate/archivi/share.to_private/  > /dev/null 2>&1
            ls -l /home/archivi/share.in/
        fi

        log 'Work files syncing'
        rsync -av --delete $DRY_RUN  /home/archivi/office/  /mnt/seagate/archivi/office/

        log 'Private files syncing'
        rsync -av --delete $DRY_RUN  /mnt/seagate/archivi/home/var/git/   /home/archivi/home/var/git/
        rsync -av --delete $DRY_RUN  /mnt/seagate/archivi/home/var/biblioteca/   /home/archivi/home/var/biblioteca/
    fi
}


private_to_disk() {

    log 'Private <-> USB'

    # Aggiornamento tramite HOST PRIVATO collegato a disco
    #
    # Policy:
    #
    #   - SHARED objects:   HOST <--> USB   (no delete)
    #
    #   - PRIVATE archive:  HOST ---> USB   (delete)
    #
    #   - WORK archive:      USB ---> HOST  (delete)
    #

    if are_objects_available; then

        log 'Shared files moving'
        if  [ "$DRY_RUN" == '' ]; then
            mv  /mnt/seagate/archivi/share.to_private/*  /home/archivi/share.in/                > /dev/null 2>&1
            mv  /home/archivi/share.out/*                /mnt/seagate/archivi/share.to_work/    > /dev/null 2>&1
            ls -l /home/archivi/share.in/
        fi

        log 'Private files syncing'
        rsync -av --delete $DRY_RUN  /home/archivi/home/      /mnt/seagate/archivi/home/

        log 'Work files syncing'
        rsync -av --delete $DRY_RUN  /mnt/seagate/archivi/office/  /home/archivi/office/
    fi
}


mount_disk() {

    if lsusb | grep $DISK_ID; then
        if mount | grep $DISK_MOUNT;then
            return 0
        else
            if [ -x "$DISK_DEV" ]; then
                mkdir -p $DISK_MOUNT
                cryptsetup -d /etc/enc-key create $MAPNAME $DISK_DEV && mount $DISK_MOUNT
            else
                echo "Il device $DISK_DEV non è disponibile."
                return $DEVICE_NOT_AVAILABLE
            fi
        fi
    else
        echo "Il disco non e' collegato."
        return $DISK_NOT_AVAILABLE
    fi
}

remove_disk() {
    if mount | grep $DISK_MOUNT > /dev/null;then
        echo "Rimozione di $DISK_MOUNT"
        umount $DISK_MOUNT && cryptsetup remove $MAPNAME
    fi
}



#
# Ciclo dei comandi
#
cmd=$1
case $cmd in

    #
    # Eseguito su host di lavoro, collegato in USB con disco esterno.
    #
    work-to-disk)

        if [ "$host" == "$WORK_HOST" ]; then
            if mount_disk ; then
                work_to_disk
                exit $EXIT_SUCCESS
            else
                echo "Disco esterno non raggiungibile;  elaborazione annullata."
            fi
        else
            echo "Questo comando dev'essere eseguito in $WORK_HOST; elaborazione annullata."
            exit $INVALID_EXECUTION_HOST
        fi
        ;;


    #
    # Eseguito su host privato, collegato in USB con disco esterno.
    #
    private-to-disk)
        if [ "$host" == "$PRIVATE_HOST" ]; then
            if mount_disk ; then
                private_to_disk
                exit $EXIT_SUCCESS
            else
                echo "Disco esterno non raggiungibile;  elaborazione annullata."
            fi
        else
            echo "Questo comando dev'essere eseguito in $PRIVATE_HOST; elaborazione annullata."
            exit $INVALID_EXECUTION_HOST
        fi
        ;;

    #
    # Gestione dispositivo
    #
    mount)
        mount_disk && echo "Dispositivo accessibile in $DISK_MOUNT."
        ;;

    remove)
        remove_disk
        ;;


    *) usage
        exit $EXIT_SUCCESS
        ;;
esac
